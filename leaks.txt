if we don't have leaks internally, this is what valgrind will report:

still reachable: 313,814 bytes in 3,165 blocks
	- dl_open
	- mlx_init
	- mlx_terminate




> perf record -g ./cub3d scenes/cub/test.cub
> perf report --no-children

minimap seems very intensive, almost half as much as rendering textures...

-	37.28%	cub3d			libc.so.6			[.] __memmove_avx_unaligned_erms
	- 37.11% __memmove_avx_unaligned_erms
		- 25.68% 0x72126e72264b
			mlx_render_images
			mlx_loop
			main
		- 11.42% 0x72126e084314
			mlx_render_images
			mlx_loop
			main
-	15.12%	cub3d			cub3d				[.] draw_texture_column
	14.26% draw_texture_column
	0.73% raycast
-	11.25%	cub3d			cub3d				[.] reset_image
	11.21% reset_image
	0x3f80000000000000
-	6.50%	cub3d			cub3d				[.] sample_wall
	4.81% sample_wall
	+ 0.86% mlx_put_pixel
	+ 0.66% mlx_draw_pixel
-	4.63%	cub3d			cub3d				[.] mlx_put_pixel
	3.38% sample_wall
+ 0.55% mlx_put_pixel
+ 0.51% mlx_draw_pixel
+	3.39%	cub3d			cub3d				[.] mlx_draw_pixel
+	1.51%	cub3d			cub3d				[.] unfilterScanline
+	1.41%	cub3d			cub3d				[.] lodepng_memcpy
+	1.30%	cub3d			cub3d				[.] image_iteration
+	1.12%	cub3d			cub3d				[.] lodepng_memset
+	0.93%	cub3d			cub3d				[.] update_adler32
+	0.83%	cub3d			cub3d				[.] draw_minimap_walls
+	0.69%	cub3d			cub3d				[.] raycast